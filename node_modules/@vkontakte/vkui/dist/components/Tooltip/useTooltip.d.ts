import * as React from 'react';
import { type Ref } from 'react';
import { type ReferenceProps } from '../../lib/floating/useFloatingWithInteractions/types';
import { type TooltipProps } from './Tooltip';
export type UseTooltipProps = Omit<TooltipProps, 'children'> & {
    [key: `data-${string}`]: string | number | boolean;
};
export type UseTooltipResult<ElementType extends HTMLElement = HTMLElement> = {
    anchorRef: Ref<ElementType>;
    anchorProps: ReferenceProps<ElementType>;
    tooltip: React.ReactNode | null;
};
export declare const useTooltip: ({ placement: placementProp, arrowPadding, arrowHeight, offsetByMainAxis, offsetByCrossAxis, hideWhenReferenceHidden, disableFlipMiddleware, disableTriggerOnFocus, onReferenceHiddenChange, defaultShown, shown: shownProp, onShownChange, hoverDelay, strategy, enableInteractive, disableArrow, disableCloseAfterClick, usePortal, id: idProp, getRootRef, appearance, style: styleProp, className, zIndex, closable, onPlacementChange, ...popperProps }: UseTooltipProps) => UseTooltipResult;
//# sourceMappingURL=useTooltip.d.ts.map