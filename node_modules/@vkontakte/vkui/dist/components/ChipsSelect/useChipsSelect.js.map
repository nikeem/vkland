{"version":3,"sources":["../../../src/components/ChipsSelect/useChipsSelect.ts"],"sourcesContent":["import * as React from 'react';\nimport { isEqual } from '@vkontakte/vkjs';\nimport { type SimulateReactInputTargetState } from '../../lib/react';\nimport { defaultFilterFn, type FilterFn, type SortFn } from '../../lib/select';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport {\n  transformValue,\n  useChipsInput,\n  type UseChipsInputProps,\n} from '../ChipsInput/useChipsInput';\nimport {\n  DEFAULT_INPUT_VALUE,\n  DEFAULT_VALUE,\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n} from '../ChipsInputBase/constants';\nimport type { ChipOption, ChipOptionLabel, ChipOptionValue } from '../ChipsInputBase/types';\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR, isNotServicePreset } from './constants';\nimport type { OptionPreset } from './types';\n\nexport interface UseChipsSelectProps<O extends ChipOption = ChipOption>\n  extends UseChipsInputProps<O> {\n  options?: O[];\n  /**\n   * Возможность создавать чипы которых нет в списке:\n   * - `true` – добавление по кнопке Enter;\n   * - `<текст>` – помимо возможности добавления через Enter, в пункте меню появится кнопка с текстом.\n   * Текст для пункта, создающего чипы при клике, также отвечает за то, будет ли показан этот пункт\n   * (показывается после того как в списке не останется опций).\n   */\n  creatable?: boolean | string;\n  /**\n   * Текст, который показывается если список опций пуст\n   */\n  emptyText?: string;\n  /**\n   * Показывать или скрывать уже выбранные опции.\n   */\n  selectedBehavior?: 'hide' | 'highlight';\n  filterFn?: false | FilterFn<O>;\n  sortFn?: false | SortFn<O>;\n  /**\n   * Будет вызвано в момент скрытия выпадающего списка\n   */\n  onClose?: VoidFunction;\n  /**\n   * Будет вызвано в момент открытия выпадающего списка\n   */\n  onOpen?: VoidFunction;\n}\n\nexport const useChipsSelect = <O extends ChipOption>({\n  // common\n  disabled,\n\n  // option\n  value: valueProp,\n  defaultValue,\n  onChange,\n  getOptionLabel = getOptionLabelDefault,\n  getOptionValue = getOptionValueDefault,\n  getNewOptionData = getNewOptionDataDefault,\n\n  // input\n  inputValue: inputValueProp,\n  defaultInputValue = DEFAULT_INPUT_VALUE,\n  onInputChange: onInputChangeProp,\n\n  // dropdown\n  creatable = false,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  filterFn = defaultFilterFn,\n  sortFn = false,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  options: optionsProp = DEFAULT_VALUE,\n  onClose,\n  onOpen,\n}: UseChipsSelectProps<O>): {\n  // options\n  value: Array<\n    O & {\n      label: ChipOptionLabel;\n      value: ChipOptionValue;\n    }\n  >;\n  // input\n  inputValue: string;\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  // dropdown states\n  options: Array<OptionPreset<O>>;\n  opened: boolean;\n  setOpened: (isOpened: boolean) => void;\n  focusedOption: O | null;\n  focusedOptionIndex: number | null;\n  setFocusedOption: React.Dispatch<React.SetStateAction<O | null>>;\n  setFocusedOptionIndex: React.Dispatch<React.SetStateAction<number | null>>;\n  addOption: (newValue: string | O) => void;\n  addOptionFromInput: (inputValue: string) => void;\n  removeOption: (newValue: ChipOptionValue | O) => void;\n  clearOptions: () => void;\n  inputRef: React.RefObject<(HTMLInputElement & SimulateReactInputTargetState) | null>;\n  clearInput: () => void;\n} => {\n  const { value, inputValue, onInputChange, ...restChipsInputProps } = useChipsInput({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue,\n    onInputChange: onInputChangeProp,\n\n    // other\n    disabled,\n  });\n\n  // dropdown\n  const [opened, setOpened] = React.useState(false);\n  const [options, setOptions] = React.useState<Array<OptionPreset<O>>>(() =>\n    opened\n      ? transformOptions({\n          value,\n          getOptionValue,\n          getOptionLabel,\n          inputValue,\n          emptyText,\n          creatable,\n          filterFn,\n          sortFn,\n          options: optionsProp,\n          selectedBehavior,\n        })\n      : [],\n  );\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = React.useState<O | null>(null);\n\n  const handleOpened = React.useCallback(\n    (isOpened: boolean) => {\n      isOpened ? onOpen?.() : onClose?.();\n      setOpened(isOpened);\n    },\n    [onOpen, onClose],\n  );\n\n  const handleInputChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onInputChange(event);\n\n      if (!opened) {\n        handleOpened(true);\n        setFocusedOptionIndex(0);\n      }\n    },\n    [onInputChange, opened, handleOpened],\n  );\n\n  useIsomorphicLayoutEffect(\n    function handleDropdownOpen() {\n      if (!opened) {\n        return;\n      }\n\n      setOptions((prevOptions) => {\n        const nextOptions = transformOptions({\n          value,\n          getOptionValue,\n          getOptionLabel,\n          inputValue,\n          emptyText,\n          creatable,\n          filterFn,\n          sortFn,\n          options: optionsProp,\n          selectedBehavior,\n        });\n\n        if (isEqual(prevOptions, nextOptions)) {\n          return prevOptions;\n        }\n\n        return nextOptions;\n      });\n    },\n    [\n      opened,\n      value,\n      getOptionLabel,\n      getOptionValue,\n      inputValue,\n      optionsProp,\n      creatable,\n      selectedBehavior,\n      filterFn,\n      sortFn,\n    ],\n  );\n\n  return {\n    ...restChipsInputProps,\n\n    // options\n    value,\n\n    // input\n    inputValue,\n    onInputChange: handleInputChange,\n\n    // dropdown states\n    options,\n    opened,\n    setOpened: handleOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  };\n};\n\nfunction transformOptions<O extends ChipOption>({\n  value,\n  getOptionValue = getOptionValueDefault,\n  getOptionLabel = getOptionLabelDefault,\n  inputValue = DEFAULT_INPUT_VALUE,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  creatable = false,\n  sortFn = false,\n  filterFn = defaultFilterFn,\n  options: optionsProp = DEFAULT_VALUE,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n}: Required<Pick<UseChipsSelectProps<O>, 'value'>> &\n  Pick<\n    UseChipsSelectProps<O>,\n    | 'getOptionValue'\n    | 'getOptionLabel'\n    | 'inputValue'\n    | 'emptyText'\n    | 'creatable'\n    | 'filterFn'\n    | 'sortFn'\n    | 'options'\n    | 'selectedBehavior'\n  >) {\n  const filteredOptionsProp = filterFn\n    ? optionsProp.filter((option) => filterFn(inputValue, option, getOptionLabel))\n    : optionsProp;\n\n  if (filteredOptionsProp.length === 0) {\n    if (inputValue !== DEFAULT_INPUT_VALUE && typeof creatable === 'string') {\n      return [{ actionText: creatable }];\n    }\n    return [{ placeholder: emptyText }];\n  }\n\n  if (sortFn) {\n    filteredOptionsProp.sort((optionA, optionB) => sortFn(optionA, optionB, inputValue));\n  }\n\n  const parsedOptions = transformValue(filteredOptionsProp, getOptionValue, getOptionLabel);\n\n  if (selectedBehavior === 'hide') {\n    const selected = value.map((item) => item.value);\n    return parsedOptions.filter((item) =>\n      isNotServicePreset(item) ? !selected.includes(item.value) : false,\n    );\n  }\n  return parsedOptions;\n}\n"],"names":["React","isEqual","defaultFilterFn","useIsomorphicLayoutEffect","transformValue","useChipsInput","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","DEFAULT_EMPTY_TEXT","DEFAULT_SELECTED_BEHAVIOR","isNotServicePreset","useChipsSelect","disabled","value","valueProp","defaultValue","onChange","getOptionLabel","getOptionValue","getNewOptionData","inputValue","inputValueProp","defaultInputValue","onInputChange","onInputChangeProp","creatable","emptyText","filterFn","sortFn","selectedBehavior","options","optionsProp","onClose","onOpen","restChipsInputProps","opened","setOpened","useState","setOptions","transformOptions","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","handleOpened","useCallback","isOpened","handleInputChange","event","handleDropdownOpen","prevOptions","nextOptions","filteredOptionsProp","filter","option","length","actionText","placeholder","sort","optionA","optionB","parsedOptions","selected","map","item","includes"],"mappings":"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"}